#pragma kernel CSMain
#include "Helpers/MarchTables.compute"

// Data structures
struct Triangle
{
	float3 v1;
	float3 v2;
	float3 v3;
};

// Properties
uint width;
uint height;
uint depth;
float surfaceLevel;

// Buffers
AppendStructuredBuffer<Triangle> triangles;

// Points [float3 position], [float noiseValue]
RWStructuredBuffer<float4> points;

uint indexFromCoord(uint x, uint y, uint z)
{
	return x + (y * width) + (z * width * height);
}

float3 CalculateEdgePoint(float3 p1, float3 p2)
{
	//return p1 + (surfaceLevel - p1.w) * (p2 - p1) / (p2.w - p1.w);
	return p1 + (p2 - p1) * 0.5f;
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	// The shader may run more than intented due to rounding
		// If the size of the chunk is 8x8x8, it should only march in a 7x7x7.
		// This is because on every march, it uses 8 points around it to create a cube. It uses the next row/col so the last one should be omitted;
	if (id.x >= width - 1 || id.y >= height - 1 || id.z >= depth - 1)
		return;
	
	// Determine points (8) used to make the cube
	float4 noisepoints[8];
	noisepoints[0] = points[indexFromCoord(id.x, id.y, id.z + 1)];
	noisepoints[1] = points[indexFromCoord(id.x + 1, id.y, id.z + 1)];
	noisepoints[2] = points[indexFromCoord(id.x + 1, id.y, id.z)];
	noisepoints[3] = points[indexFromCoord(id.x, id.y, id.z)];
	noisepoints[4] = points[indexFromCoord(id.x, id.y + 1, id.z + 1)];
	noisepoints[5] = points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)];
	noisepoints[6] = points[indexFromCoord(id.x + 1, id.y + 1, id.z)];
	noisepoints[7] = points[indexFromCoord(id.x, id.y + 1, id.z)];

	// Determine the bytecode for the marching cube algorithm
	int byteCode = 0;
	for (int i = 0; i < 8; ++i)
	{
		if (noisepoints[i].w < surfaceLevel)
		{
			byteCode |= 1 << i;
		}
	}
	
	// Create the triangles
	int index = 0;
	while (index < 16 && triangulation[byteCode][index] != -1)
	{
		Triangle t;

		// Find the 3 edges used for this triangle
		const int edge1 = triangulation[byteCode][index];
		const int edge2 = triangulation[byteCode][index + 1];
		const int edge3 = triangulation[byteCode][index + 2];

		// Find the vertices
		int a0 = cornerIndexAFromEdge[edge1];
		int a1 = cornerIndexBFromEdge[edge1];
		
		int b0 = cornerIndexAFromEdge[edge2];
		int b1 = cornerIndexBFromEdge[edge2];
		
		int c0 = cornerIndexAFromEdge[edge3];
		int c1 = cornerIndexBFromEdge[edge3];

		// Find the midpoints for the vertices
		t.v1 = CalculateEdgePoint(noisepoints[a0].xyz, noisepoints[a1].xyz);
		t.v2 = CalculateEdgePoint(noisepoints[b0].xyz, noisepoints[b1].xyz);
		t.v3 = CalculateEdgePoint(noisepoints[c0].xyz, noisepoints[c1].xyz);

		// Add the triangle to the buffer
		triangles.Append(t);
		
		// Setup index for the next triangle
		index += 3;
	}
}
